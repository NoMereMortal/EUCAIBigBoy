[project]
name = "chat-workbench"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "app",
    "opentelemetry-instrumentation-fastapi>=0.56b0",
]

[dependency-groups]
dev = [
    "ipykernel>=6.29.5",
    "pre-commit>=4.1.0",
    "ruff>=0.9.6",
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.25.3",
    "pytest-cov>=4.1.0",
    "coverage>=7.4.0",
    "types-cachetools>=5.5.0.20240820",
    "pyrefly>=0.25.0",
    "types-aiofiles>=24.1.0.20250516",
    "types-pyjwt>=1.7.1",
    "moto[all]>=5.1.8",
]

[tool.uv.sources]
app = { workspace = true }

[tool.uv.workspace]
members = ["backend", "examples/*"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["backend"]

[tool.ruff]
target-version = "py39"
line-length = 88
lint.select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandits
    "ASYNC",# flake8-async
]
lint.ignore = [
    "D203",  # one-blank-line-before-class (incompatible with D211)
    "D212",  # multi-line-summary-first-line (incompatible with D213)
    "E501",  # line-too-long (handled by formatter)
    "B008",
    "S101",  # Ignore Assert warnings (used in tests)
    "RUF006", # Ignore storing reference to asyncio task creation
]

[tool.ruff.lint.per-file-ignores]
"*/tests/*" = ["S105", "SIM102", "SIM108"]  # Ignore hardcoded passwords and simplify rules in tests

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.bandit]
exclude_dirs = ["tests", "docs", "venv", ".venv"]
skips = ["B101", "B311"]

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests",
]
addopts = "--cov=backend --cov-report=term --cov-report=xml --cov-report=html"

[tool.coverage.run]
source = ["app", "backend"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]
branch = true

[tool.coverage.paths]
source = [
    "backend/",
    "*/backend/",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
]
show_missing = true
fail_under = 80
