# Chat Workbench Configuration Example
#
# This configuration supports deployment to both Commercial AWS and AWS GovCloud.
# The system automatically detects the deployment environment based on region:
# - Commercial AWS: us-east-1, us-west-2, eu-west-1, etc.
# - AWS GovCloud: us-gov-east-1, us-gov-west-1
#
# Key differences in GovCloud deployment:
# - CloudFront is not available (ALB directly internet-facing)
# - WAF uses REGIONAL scope instead of CLOUDFRONT scope
# - All ARNs automatically use correct partition (aws-us-gov vs aws)
# - SSL termination occurs at ALB level only

# Default environment (dev, staging, prod)
env: dev

# Development environment configuration
dev:
  # AWS Configuration
  awsProfile: default
  deploymentName: demo
  accountNumber: "123456789012"
  region: us-east-1
  deploymentStage: dev

  # Application Configuration
  appName: cwb
  logLevel: INFO
  targetPlatform: linux/amd64
  removalPolicy: destroy
  runCdkNag: false

  # Logging Configuration
  loggingConfig:
    # CloudWatch log retention in days (1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653)
    logRetentionDays: 30        # Application and service logs retention
    wafLogRetentionDays: 30     # WAF logs retention (if enabled)

  # UI Configuration
  uiConfig:
    title: 'Chat Workbench'

    # Optional: Bring Your Own Container (BYOC) for UI
    # When specified, the UI will use your pre-built container from ECR instead of building from source
    # This enables faster deployments and decouples infrastructure from application release cycles
    # ecrContainer:
    #   repositoryUri: "123456789012.dkr.ecr.us-east-1.amazonaws.com/my-ui-repo"
    #   imageTag: "v1.2.3"  # Can be tag or SHA256 digest (recommended for production)
    #   # Production example with SHA256 digest for immutable deployments:
    #   # imageTag: "sha256:1a2b3c4d5e6f7890abcdef1234567890abcdef1234567890abcdef1234567890"

    # Container Health Check Configuration
    containerHealthCheckConfig:
      command:
        - CMD-SHELL
        - curl -f http://127.0.0.1:3000/health || exit 1
      interval: 60                    # Health check interval in seconds
      timeout: 10                     # Health check timeout in seconds
      retries: 5                      # Number of retries before marking unhealthy
      startPeriod: 120                # Grace period before health checks start

    # ALB Target Group Health Check Configuration
    healthCheckConfig:
      path: /health                   # Health check path (required)
      interval: 60                    # Health check interval in seconds (5-300)
      timeout: 10                     # Health check timeout in seconds (2-120)
      healthyThresholdCount: 2        # Consecutive successful checks to mark healthy (2-10)
      unhealthyThresholdCount: 10     # Consecutive failed checks to mark unhealthy (2-10)

  # VPC Configuration
  vpcConfig:
    vpcId:   # Optional: Use existing VPC ID, leave empty to create new VPC

    # Optional: Specify subnet IDs when using existing VPC
    # If you specify subnet IDs, ONLY those subnets will be used
    # If you leave arrays empty or omit them, ALL subnets of that type will be discovered and used

    publicSubnetIds:     # For internet-facing ALB and resources with public IPs
      - subnet-12345678  # Example: Specify exact subnets to use
      - subnet-87654321
      # Alternative options:
      # publicSubnetIds: []                 # Empty array = use ALL public subnets found in VPC
      # publicSubnetIds: [subnet-single]    # Single subnet
      # # (omit entirely to use all public subnets)

    privateSubnetIds:    # For ECS services and resources with NAT gateway internet access
      - subnet-abcdef12  # Example: Specify exact subnets to use
      - subnet-21fedcba
      # Alternative options:
      # privateSubnetIds: []                # Empty array = use ALL private subnets found in VPC
      # privateSubnetIds: [subnet-single]   # Single subnet
      # # (omit entirely to use all private subnets)

    isolatedSubnetIds:   # For databases, cache services, and resources with NO internet access
      - subnet-isolated1 # Example: Specify exact subnets to use
      - subnet-isolated2
      # Alternative options:
      # isolatedSubnetIds: []               # Empty array = use ALL isolated subnets found in VPC
      # isolatedSubnetIds: [subnet-single]  # Single isolated subnet (common for high-security deployments)
      # # (omit entirely to use all isolated subnets)

    # Service-specific subnet overrides (ADVANCED FEATURE)
    # These override the type-based subnet selection above for specific services
    # Only use if you need precise control over individual service placement
    serviceSubnets:
      # ECS services (API and UI containers) - overrides isolated/private preference
      ecs:
        - subnet-ecs-specific1
        - subnet-ecs-specific2

      # ElastiCache Serverless - overrides isolatedSubnetIds for cache service only
      elasticache:
        - subnet-cache-specific1
        - subnet-cache-specific2

      # Application Load Balancer - must match albPlacement setting (public/private/isolated)
      # If albPlacement is 'public', these must be public subnets
      # If albPlacement is 'private', these must be private subnets
      # If albPlacement is 'isolated', these must be isolated subnets
      alb:
        - subnet-alb-public1   # Must match albPlacement type
        - subnet-alb-public2   # Must match albPlacement type

    # Note: Service subnet selection precedence:
    # 1. serviceSubnets.{service} (highest precedence - use these exact subnets, must match service requirements)
    # 2. {type}SubnetIds (medium precedence - filter by subnet type)
    # 3. Auto-discovery (lowest precedence - use all subnets of the appropriate type)
    #
    # IMPORTANT: serviceSubnets.alb must contain subnets that match the albPlacement setting!
    # - albPlacement: public → serviceSubnets.alb must be public subnets
    # - albPlacement: private → serviceSubnets.alb must be private subnets
    # - albPlacement: isolated → serviceSubnets.alb must be isolated subnets

    # VPC Endpoints Configuration (Required for ECS in isolated subnets)
    # When ECS services run in isolated subnets (no internet access), VPC endpoints enable
    # access to AWS services without going through the public internet
    vpcEndpoints:
      # Subnet types where VPC endpoints will be created (default: ['private', 'isolated'])
      # Options: 'private' (for ECS services with NAT access), 'isolated' (for databases with no internet)
      # Best practice: Use both private and isolated to serve your full application stack
      endpointSubnetTypes: ['private', 'isolated']  # Default - can customize as needed
      # Alternative examples:
      # endpointSubnetTypes: ['private']     # Only private subnets (ECS services only)
      # endpointSubnetTypes: ['isolated']    # Only isolated subnets (databases only)
      # endpointSubnetTypes: ['private', 'isolated']  # Both (recommended for full-stack apps)
      # Essential for ECS containers (Interface Endpoints - ~$7.20/month each per AZ)
      ecrDocker: false        # ECR Docker Registry - REQUIRED for container pulls
      ecrApi: false           # ECR API - REQUIRED for container pulls

      # Essential services (Gateway Endpoints - FREE)
      s3: false               # S3 access - REQUIRED for ECR image layers
      dynamodb: false         # DynamoDB access - REQUIRED for app data

      # Essential for app functionality (Interface Endpoints - ~$7.20/month each per AZ)
      secretsmanager: false   # Secrets Manager - REQUIRED for credentials
      ssm: false              # Parameter Store - REQUIRED for configuration
      kms: false              # KMS encryption - REQUIRED if using encrypted secrets

      # AI/ML services (Interface Endpoints - ~$7.20/month each per AZ)
      bedrock: false          # Bedrock model management
      bedrockRuntime: false   # Bedrock inference - REQUIRED for AI chat features
      bedrockAgent: false     # Bedrock Knowledge Base - if using RAG

      # Logging & monitoring (Interface Endpoints - ~$7.20/month each per AZ)
      cloudwatchLogs: false   # CloudWatch Logs - for ECS container logs
      monitoring: false       # CloudWatch metrics

      # Infrastructure services (Interface Endpoints - ~$7.20/month each per AZ)
      sts: false              # STS token service - for IAM role assumptions
      ec2: false              # EC2 API calls
      ecs: false              # ECS API calls
      elasticloadbalancing: false  # ALB API calls

      # Optional services (Interface Endpoints - ~$7.20/month each per AZ)
      opensearch: false       # OpenSearch Serverless - if using vector search

    # Example: Minimal configuration for ECS + GenAI in isolated subnets
    # Uncomment and set to true the services you need:
    # vpcEndpoints:
    #   ecrDocker: true        # Required for container pulls
    #   ecrApi: true           # Required for container pulls
    #   s3: true               # Required for ECR layers (FREE)
    #   dynamodb: true         # Required for app data (FREE)
    #   secretsmanager: true   # Required for credentials
    #   bedrockRuntime: true   # Required for AI features
    #   cloudwatchLogs: true   # Optional for logging

    # Optional: Use existing VPC endpoints instead of creating new ones
    # existingVpcEndpoints:
    #   ecr: "vpce-12345678"
    #   s3: "vpce-87654321"
    #   # ... other endpoint IDs

  # Cognito Configuration
  cognitoAuthConfig:
    userPoolName: cwb-users
    userPoolDomainName: cwb-dev

  # Load Balancer Configuration
  loadBalancerConfig:
    idleTimeout: 300

    # ALB Placement Strategy
    albPlacement: public  # Options: public, private, isolated
    # public:   Internet-facing ALB in public subnets (default)
    # private:  Internal ALB in private subnets with NAT gateway access
    # isolated: Internal ALB in isolated subnets (maximum security, no internet access)

    # Optional SSL Certificate (supports both ACM and IAM certificates)
    # sslCertificateArn: arn:aws:acm:us-east-1:123456789012:certificate/abc-123-def
    # sslCertificateArn: arn:aws:iam::123456789012:server-certificate/my-cert

  # WAF Security Configuration (Always Enabled)
  # WAF provides mandatory application-level protection and cannot be disabled
  wafConfig:
    managedRules:
      # AWS Core Rule Set - protects against OWASP Top 10 (WARNING: can be very strict)
      # Only enable after thorough testing - may block legitimate traffic
      coreRuleSet: false
      # Known Bad Inputs - protects against common attack patterns (recommended)
      knownBadInputs: true
      # Amazon IP Reputation List - blocks requests from known malicious IPs (recommended)
      amazonIpReputation: true
    rateLimiting:
      enabled: true
      # Rate limit per 5-minute rolling window (WAF standard)
      # A value of 2000 means 2000 requests per 5 minutes per IP
      # Range: 100-20,000 requests per 5-minute period
      requestsPerMinute: 2000
    logging:
      # WAF logging (disabled by default for cost management)
      # Enable for production environments requiring audit trails
      enabled: false

  # Alarm Configuration
  alarmConfig:
    enable: false
    period: 1
    threshold: 1
    evaluationPeriods: 1
    loggingFilterPatterns:
      - ERROR
      - CRITICAL
    emailAddresses:
      - admin@example.com

  # Authentication Configuration
  authConfig:
    enableAuth: true
    authority: http://localhost:8080/realms/cwb
    clientId: cwb-ui
    secretName: app/auth/cognito

  # REST API Configuration
  restApiConfig:
    apiVersion: v1

    # Optional: Bring Your Own Container (BYOC) for API
    # When specified, the API will use your pre-built container from ECR instead of building from source
    # This enables faster deployments and decouples infrastructure from application release cycles
    # Note: Either use traditional Docker build OR ECR container, not both
    # ecrContainer:
    #   repositoryUri: "123456789012.dkr.ecr.us-east-1.amazonaws.com/my-api-repo"
    #   imageTag: "v1.2.3"  # Can be tag or SHA256 digest (recommended for production)
    #   # Production example with SHA256 digest for immutable deployments:
    #   # imageTag: "sha256:3a20c10fe4f296c229af3554ac5540e63cbd3830fb30849809b46034067136a6"
    #   # GovCloud example:
    #   # repositoryUri: "374008976085.dkr.ecr.us-gov-west-1.amazonaws.com/my-api-repo"
    #   # imageTag: "sha256:4d6110d5d19f7a607964de9e9632512f68c45433835f0d38e473e5afe0f44bb6"

    containerConfig:
      cpuLimit: 1024
      memoryLimit: 2048
      healthCheckConfig:
        command:
          - CMD-SHELL
          - curl -f http://127.0.0.1:8000/api/health || exit 1
        interval: 10
        startPeriod: 30
        timeout: 5
        retries: 3
    healthCheckConfig:
      path: /api/health                # Health check path (required, version-agnostic)
      interval: 60
      timeout: 30
      healthyThresholdCount: 2
      unhealthyThresholdCount: 10
    autoScalingConfig:
      minCapacity: 1
      maxCapacity: 5
      defaultInstanceWarmup: 120
      cooldown: 300
      metricConfig:
        albMetricName: RequestCountPerTarget
        targetValue: 100
        duration: 60
        estimatedInstanceWarmup: 60

  # Data Configuration
  dataConfig:
    # ElastiCache Serverless Configuration
    elastiCacheStorageLimitGb: 50
    elastiCacheEcpuLimit: 10000

    # File Storage Configuration
    fileStorageEnabled: true
    fileStorageType: s3

    # OpenSearch Serverless Configuration (for RAG features)
    openSearchEnabled: false  # Disabled by default
    openSearchDefaultIndex: "documents"
    openSearchStandbyReplicas: false

    # Neptune Graph Database Configuration (optional)
    neptuneEnabled: false

    # Bedrock Knowledge Base Configuration (optional)
    bedrockKnowledgeBaseEnabled: false
    embeddingModelId: "amazon.titan-embed-text-v1"
    # knowledgeBaseName: "my-knowledge-base"  # Optional custom name
    vectorIndexName: "documents"
    # s3InclusionPrefixes: ["documents/", "pdfs/"]  # Optional S3 prefixes

  # Resource Tags
  tags:
    - Key: Project
      Value: ChatWorkbench
    - Key: Environment
      Value: Development

# Staging environment configuration
staging:
  # AWS Configuration
  awsProfile: staging
  deploymentName: cwb
  accountNumber: "123456789012"
  region: us-east-1
  deploymentStage: staging
  appName: cwb
  removalPolicy: retain

  loadBalancerConfig:
    idleTimeout: 300
    # SSL Certificate for staging environment
    sslCertificateArn: "arn:aws:acm:us-east-1:123456789012:certificate/staging-cert-id"
    httpsRedirect: true

  # WAF Configuration (production-ready settings)
  wafConfig:
    managedRules:
      coreRuleSet: true        # Enable for staging to test strictness
      knownBadInputs: true
      amazonIpReputation: true
    rateLimiting:
      enabled: true
      requestsPerMinute: 5000  # Higher limit for staging testing
    logging:
      enabled: true            # Enable logging for staging analysis

  uiConfig:
    title: "Chat Workbench Staging"

  # Example: Using ECR containers for staging environment
  # restApiConfig:
  #   apiVersion: v1
  #   ecrContainer:
  #     repositoryUri: "123456789012.dkr.ecr.us-east-1.amazonaws.com/cwb-api"
  #     imageTag: "staging-v1.2.3"
  #   # ... other config options

  # uiConfig:
  #   title: "Chat Workbench Staging"
  #   ecrContainer:
  #     repositoryUri: "123456789012.dkr.ecr.us-east-1.amazonaws.com/cwb-ui"
  #     imageTag: "staging-v1.2.3"

# Production environment configuration
prod:
  # AWS Configuration
  awsProfile: prod
  deploymentName: cwb
  accountNumber: "123456789012"
  region: us-east-1  # or us-gov-west-1 for GovCloud production
  deploymentStage: prod
  appName: cwb
  removalPolicy: retain

  loadBalancerConfig:
    idleTimeout: 300
    # SSL Certificate for production environment
    sslCertificateArn: "arn:aws:acm:us-east-1:123456789012:certificate/prod-cert-id"
    httpsRedirect: true

  # WAF Configuration (production security settings)
  wafConfig:
    managedRules:
      coreRuleSet: false       # Disable if too strict for your application
      knownBadInputs: true     # Always enabled for production
      amazonIpReputation: true # Always enabled for production
    rateLimiting:
      enabled: true
      requestsPerMinute: 10000 # Higher limit for production load
    logging:
      enabled: true            # Enable for production audit trails

  uiConfig:
    title: "Chat Workbench"

  # Example: Using ECR containers with SHA256 digests for production (recommended)
  # Production should use immutable image digests for maximum security and reproducibility
  # restApiConfig:
  #   apiVersion: v1
  #   ecrContainer:
  #     repositoryUri: "123456789012.dkr.ecr.us-east-1.amazonaws.com/cwb-api"
  #     imageTag: "sha256:3a20c10fe4f296c229af3554ac5540e63cbd3830fb30849809b46034067136a6"
  #   # ... other config options

  # uiConfig:
  #   title: "Chat Workbench"
  #   ecrContainer:
  #     repositoryUri: "123456789012.dkr.ecr.us-east-1.amazonaws.com/cwb-ui"
  #     imageTag: "sha256:1a2b3c4d5e6f7890abcdef1234567890abcdef1234567890abcdef1234567890"
